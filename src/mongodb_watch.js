const { user } = require('./app/controllers/UserControllers');
const MaGiamGia = require('./app/models/MaGiamGia.model');
const Xe = require('./app/models/Xe.model');
const User = require('./app/models/user.model');
const HoaDon = require('./app/models/HoaDon.model');
const HoaDonController_ = require('./app/controllers/HoaDonController_');
const ThongBao = require('./app/models/ThongBao');
const moment = require('moment');
const admin = require('firebase-admin');

const updateExpiredPromotionalOffers = async () => {
    // L·∫•y t·∫•t c·∫£ c√°c ∆∞u ƒë√£i

    // T·∫°o h√†m ki·ªÉm tra tr·∫°ng th√°i c·ªßa m√£ gi·∫£m gi√°
    const checkExpiredPromotionalOffers = async () => {
        // Duy·ªát qua danh s√°ch c√°c m√£ gi·∫£m gi√°
        const offers = await MaGiamGia.find();
        const Users = await User.find();
        const HoaDons = await HoaDon.find();

        for (const offer of offers) {
            // Ki·ªÉm tra xem ∆∞u ƒë√£i ƒë√£ h·∫øt h·∫°n ch∆∞a
            const now = new Date();
            if (offer.TrangThai === true && offer.HSD < now) {
                // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa ∆∞u ƒë√£i th√†nh false
                await MaGiamGia.findOneAndUpdate({ _id: offer._id }, {
                    $set: {
                        TrangThai: false,
                    },
                });
            }
        }
        for (const u of Users) {
            const xes = await Xe.find({ ChuSH: u._id });
            if (xes.length > 0) {
                // S·ª≠a tr·∫°ng th√°i ƒëƒÉng th√†nh true
                if (u.DangXe == false) {
                    await User.updateOne({ _id: u._id }, {
                        $set: {
                            DangXe: true,
                        },
                    });
                }

            }
        }

        for (const hoadon of HoaDons) {
            const user = await User.findOne({ _id: hoadon.User });
            const car = await Xe.findOne({ _id: hoadon.Xe });
            const now = moment();
            const dateFromDB = moment(hoadon.TimeChuXeXN);
            // t√≠nh th·ªùi gian ƒë√£ qua
            const duration = moment.duration(now.diff(dateFromDB));
            // n·∫øu c√≤n 15 ph√∫t m√† user ch∆∞a thanh to√°n -> g·ª≠i th√¥ng b√°o

            if (hoadon.TrangThaiHD == 2) {
                if (duration.asSeconds() >= 2700 && duration.asSeconds() < 2703 ) {
                    const title = "Th√¥ng b√°o chu·∫©n b·ªã hu·ª∑ chuy·∫øn";
                    const content = "Chuy·∫øn xe " + hoadon.MaHD + " s·∫Øp h·∫øt h·∫°n";
                    sendNotificationToUser(user.TokenFCM, title, content);

                    const noidungNotify = "üöó Xin ch√†o kh√°ch h√†ng " + user.UserName + ",\n\n" +
                        "Y√™u c·∫ßu thu√™ xe " + car.MauXe + "(" + hoadon.MaHD + ")" + " c·ªßa qu√Ω kh√°ch s·∫Øp h·∫øt th·ªùi gian thanh to√°n.\n\n" +
                        "Qu√Ω kh√°ch vui l√≤ng thanh to√°n tr∆∞·ªõc 15 ph√∫t k·ªÉ t·ª´ khi th√¥ng b√°o n√†y ƒë∆∞·ª£c g·ª≠i.\n\n" +
                        "Xin c·∫£m ∆°n!\n\n" +
                        "FastCar Team üöò";
                    const thongbao = new ThongBao({
                        HinhAnh: car.HinhAnh[0],
                        TieuDe: "S·∫Øp h·∫øt th·ªùi gian ƒë·∫∑t c·ªçc",
                        NoiDung: noidungNotify,
                        User: user
                    });
                    await thongbao.save();
                } else if (duration.asSeconds() >= 3600 && duration.asSeconds() < 3603) {
                    // hu·ª∑
                    await HoaDon.findOneAndUpdate({ _id: hoadon._id }, {
                        $set: {
                            TrangThaiHD: 0,
                            LyDo: "Chuy·∫øn xe ƒë√£ b·ªã hu·ª∑ b·ªüi kh√°ch h√†ng.\nL√Ω do: H·∫øt th·ªùi gian thanh to√°n."
                        }
                    });

                    const title = "Th√¥ng b√°o hu·ª∑ chuy·∫øn";
                    const content = "Chuy·∫øn xe " + hoadon.MaHD + " c·ªßa b·∫°n ƒë√£ b·ªã hu·ª∑ v√¨ qu√° h·∫°n ƒë·∫∑t c·ªçc";
                    sendNotificationToUser(user.TokenFCM, title, content);

                    const noidungNotify = "üöó Xin ch√†o kh√°ch h√†ng " + user.UserName + ",\n\n" +
                        "Y√™u c·∫ßu thu√™ xe " + car.MauXe + " (" + hoadon.MaHD + ")" + " c·ªßa qu√Ω kh√°ch ƒë√£ t·ª± ƒë·ªông hu·ª∑ b·ªüi h·ªá th·ªëng do h·∫øt th·ªùi gian thanh to√°n.\n\n" +
                        "Qu√Ω kh√°ch c√≥ th·ªÉ t√¨m ki·∫øm v√† ƒë·∫∑t cho m√¨nh m·ªôt xe kh√°c.\n\n" +
                        "R·∫•t mong ƒë∆∞·ª£c qu√Ω kh√°ch tin t∆∞·ªüng s·ª≠ d·ª•ng FastCar. Ch√∫ng t√¥i xin c·∫£m ∆°n!\n\n" +
                        "üöó ƒê·ªôi ng≈© FastCar üöò"
                    const thongbao = new ThongBao({
                        HinhAnh: car.HinhAnh[0],
                        TieuDe: "Hu·ª∑ ƒë·∫∑t xe - Qu√° h·∫°n ƒë·∫∑t c·ªçc",
                        NoiDung: noidungNotify,
                        User: user
                    });
                    await thongbao.save();
                    notificationSent60 = true;
                }
            }

        }
    };

    // Ch·∫°y h√†m ki·ªÉm tra tr·∫°ng th√°i c·ªßa m√£ gi·∫£m gi√° ƒë·ªãnh k·ª≥
    setInterval(checkExpiredPromotionalOffers, 5000);
};

async function sendNotificationToUser(tokenFCM, title, body) {

    const message = {
        notification: {
            title: title,
            body: body
        },
        token: tokenFCM,
    };

    try {
        // G·ª≠i th√¥ng b√°o
        await admin.messaging().send(message);
        console.log('Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn token:', tokenFCM);
    } catch (error) {
        console.error('G·ª≠i th√¥ng b√°o th·∫•t b·∫°i:', error);
    }
}

module.exports = { updateExpiredPromotionalOffers }